{"version":3,"file":"static/js/454.6aa445ad.chunk.js","mappings":"qIAEA,IAAeA,EAAf,G,oICAA,E,OAAA,G,2BCsHA,MA9GA,WACI,MAAyCC,IAAjCC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,aAExB,GAA4BC,EAAAA,EAAAA,UAA4B,IAAxD,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0CF,EAAAA,EAAAA,UAAiB,KAA3D,eAAOG,EAAP,KAAsBC,EAAtB,KACA,GAAkCJ,EAAAA,EAAAA,WAAkB,GAApD,eAAOK,EAAP,KAAkBC,EAAlB,KACA,GAA8CN,EAAAA,EAAAA,WAAkB,GAAhE,eAAOO,EAAP,KAAwBC,EAAxB,KAEMC,GAAiBC,EAAAA,EAAAA,cAAY,SAACC,GAChC,IAAIC,GAAQ,EACRD,EAAUE,OAAS,IACnBD,GAAQ,GAEZV,GAAU,SAACY,GAAD,wBAAoBA,IAApB,OAAmCH,OAC7CH,EAAmBD,GACnBH,EAAiBD,EAAgB,GACjCG,EAAaM,KACd,IAEGG,GAAaL,EAAAA,EAAAA,aAAW,mCAC1B,WAAOM,GAAP,mFAAyBC,EAAzB,+BAAkC,IAE1BT,GADAQ,GAMJjB,EAAakB,GAAQC,MAAK,SAACC,GACnBA,GAAqB,OAAXA,GACVV,EAAeU,EAAOC,KAAKC,YATvC,2CAD0B,sDAc1B,CAACZ,EAAgBV,KAGrBuB,EAAAA,EAAAA,YAAU,WACNP,GAAW,EAAMZ,KAClB,IAEH,IAAqBoB,EAgDfC,EAAe1B,GAAQ,SAAC,IAAD,IAAmB,KAC1C2B,EACF5B,IAAYU,GAAkB,SAAC,IAAD,CAASV,QAASA,IAAc,KAElE,OACI,iBAAK6B,UAAU,eAAf,UACKF,EACAC,GACD,eAAIC,UAAU,eAAd,UAxDaH,EAwD6BtB,EAvDvCsB,EAAII,KAAI,SAACC,EAAMC,GAClB,IAAMC,KACsD,IAAxDF,EAAKG,UAAUC,KAAKC,QAAQ,wBAEhC,OACI,eAAYP,UAAU,eAAtB,UACI,UAAC,KAAD,CAAMQ,GAAE,kBAAaN,EAAKO,IAA1B,WACI,gBACIC,IAAG,UAAKR,EAAKG,UAAUC,KAApB,YAA4BJ,EAAKG,UAAUM,WAC9CC,IAAKV,EAAKW,MACVb,UAAU,mBACVc,MACIV,EACM,CAAEW,UAAW,SACb,CAAEA,UAAW,YAG3B,gBAAKf,UAAU,oBAAf,SAAoCE,EAAKW,SACzC,iBAAKb,UAAU,qBAAf,UACKE,EAAKc,OAAO,GAAGC,MADpB,WAbCd,UAmDb,mBACIe,KAAK,SACLlB,UAAU,mCACVmB,SAAUtC,EACViC,MAAO,CAAEM,QAASzC,EAAY,OAAS,SACvC0C,QAAS,kBAAMhC,GAAW,EAAOZ,IALrC,UAOI,gBAAKuB,UAAU,QAAf,6BC3GhB,MAJA,WACI,OAAO,SAAC,EAAD,M,8ECAI,SAASsB,EAAmBzB,GACzC,OCJa,SAA4BA,GACzC,GAAI0B,MAAMC,QAAQ3B,GAAM,OAAO,EAAA4B,EAAA,GAAiB5B,GDGzC,CAAkBA,IELZ,SAA0B6B,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOH,MAAMM,KAAKH,GFInF,CAAgB7B,KAAQ,EAAAiC,EAAA,GAA2BjC,IGLvE,WACb,MAAM,IAAIkC,UAAU,wIHIwE","sources":["components/errorMessage/index.ts","services/index.ts","components/comicsList/ComicsList.tsx","components/pages/ComicsPage.tsx","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import ErrorMessage from './ErrorMessage'\r\n\r\nexport default ErrorMessage\r\n","import MarvelService from './MarvelService'\r\n\r\nexport default MarvelService\r\n","import React, { useState, useEffect, useCallback } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './comicsList.scss'\r\nimport xMen from 'assets/img/x-men.png'\r\nimport { MyChar, IDataComics, IMainComicsInfo } from 'type/types'\r\nimport useMarvelService from 'services'\r\nimport { render } from '@testing-library/react'\r\nimport ErrorMessage from 'components/errorMessage'\r\nimport Spinner from 'components/spinner'\r\n\r\nfunction ComicsList() {\r\n    const { loading, error, getAllComics } = useMarvelService()\r\n\r\n    const [comics, setComics] = useState<IMainComicsInfo[]>([])\r\n    const [currentOffset, setCurrentOffset] = useState<number>(100)\r\n    const [charEnded, setCharEnded] = useState<boolean>(false)\r\n    const [newItemsLoading, setNewItemsLoading] = useState<boolean>(false)\r\n\r\n    const onComicsLoaded = useCallback((newComics: IMainComicsInfo[]) => {\r\n        let ended = false\r\n        if (newComics.length < 8) {\r\n            ended = true\r\n        }\r\n        setComics((comicsData) => [...comicsData, ...newComics])\r\n        setNewItemsLoading(newItemsLoading)\r\n        setCurrentOffset(currentOffset + 8)\r\n        setCharEnded(ended)\r\n    }, [])\r\n\r\n    const updateData = useCallback(\r\n        async (initial: boolean, offset = 100) => {\r\n            if (initial) {\r\n                setNewItemsLoading(false)\r\n            } else {\r\n                setNewItemsLoading(true)\r\n            }\r\n\r\n            getAllComics(offset).then((result) => {\r\n                if (result && result !== null) {\r\n                    onComicsLoaded(result.data.results)\r\n                }\r\n            })\r\n        },\r\n        [onComicsLoaded, getAllComics]\r\n    )\r\n\r\n    useEffect(() => {\r\n        updateData(true, currentOffset)\r\n    }, [])\r\n\r\n    const renderItems = (arr: IMainComicsInfo[]) => {\r\n        return arr.map((item, i) => {\r\n            const fallBack = !!(\r\n                item.thumbnail.path.indexOf('image_not_available') !== -1\r\n            )\r\n            return (\r\n                <li key={i} className=\"comics__item\">\r\n                    <Link to={`/comics/${item.id}`}>\r\n                        <img\r\n                            src={`${item.thumbnail.path}.${item.thumbnail.extension}`}\r\n                            alt={item.title}\r\n                            className=\"comics__item-img\"\r\n                            style={\r\n                                fallBack\r\n                                    ? { objectFit: 'unset' }\r\n                                    : { objectFit: 'cover' }\r\n                            }\r\n                        />\r\n                        <div className=\"comics__item-name\">{item.title}</div>\r\n                        <div className=\"comics__item-price\">\r\n                            {item.prices[0].price}$\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n                // <li\r\n                //     key={item.id}\r\n                //     className=\"char__item\"\r\n                //     // onClick={() => {\r\n                //     //     onCharSelected(item.id)\r\n                //     //     focusOnItem(i)\r\n                //     // }}\r\n                //     role=\"presentation\"\r\n                // >\r\n                //     <img\r\n                //         src={`${item.thumbnail.path}.${item.thumbnail.extension}`}\r\n                //         alt={item.title}\r\n                //         style={\r\n                //             fallBack\r\n                //                 ? { objectFit: 'unset' }\r\n                //                 : { objectFit: 'cover' }\r\n                //         }\r\n                //     />\r\n                //     <div className=\"char__name\">{item.name}</div>\r\n                // </li>\r\n            )\r\n        })\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null\r\n    const spinner =\r\n        loading && !newItemsLoading ? <Spinner loading={loading} /> : null\r\n\r\n    return (\r\n        <div className=\"comics__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            <ul className=\"comics__grid\">{renderItems(comics)}</ul>\r\n            <button\r\n                type=\"button\"\r\n                className=\"button button__main button__long\"\r\n                disabled={newItemsLoading}\r\n                style={{ display: charEnded ? 'none' : 'block' }}\r\n                onClick={() => updateData(false, currentOffset)}\r\n            >\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComicsList\r\n","import React from 'react'\r\nimport ComicsList from '../comicsList/ComicsList'\r\n\r\nfunction ComicsPage() {\r\n    return <ComicsList />\r\n}\r\n\r\nexport default ComicsPage\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["ErrorMessage","useMarvelService","loading","error","getAllComics","useState","comics","setComics","currentOffset","setCurrentOffset","charEnded","setCharEnded","newItemsLoading","setNewItemsLoading","onComicsLoaded","useCallback","newComics","ended","length","comicsData","updateData","initial","offset","then","result","data","results","useEffect","arr","errorMessage","spinner","className","map","item","i","fallBack","thumbnail","path","indexOf","to","id","src","extension","alt","title","style","objectFit","prices","price","type","disabled","display","onClick","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}